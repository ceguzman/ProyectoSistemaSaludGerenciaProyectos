package co.edu.poli.salud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PeopleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleAllPropertiesEquals(People expected, People actual) {
        assertPeopleAutoGeneratedPropertiesEquals(expected, actual);
        assertPeopleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleAllUpdatablePropertiesEquals(People expected, People actual) {
        assertPeopleUpdatableFieldsEquals(expected, actual);
        assertPeopleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleAutoGeneratedPropertiesEquals(People expected, People actual) {
        assertThat(expected)
            .as("Verify People auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleUpdatableFieldsEquals(People expected, People actual) {
        assertThat(expected)
            .as("Verify People relevant properties")
            .satisfies(e -> assertThat(e.getDocumentNumber()).as("check documentNumber").isEqualTo(actual.getDocumentNumber()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getFirstSurname()).as("check firstSurname").isEqualTo(actual.getFirstSurname()))
            .satisfies(e -> assertThat(e.getSecondName()).as("check secondName").isEqualTo(actual.getSecondName()))
            .satisfies(e -> assertThat(e.getSecondSurname()).as("check secondSurname").isEqualTo(actual.getSecondSurname()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleUpdatableRelationshipsEquals(People expected, People actual) {
        assertThat(expected)
            .as("Verify People relationships")
            .satisfies(e -> assertThat(e.getTypeDocument()).as("check typeDocument").isEqualTo(actual.getTypeDocument()))
            .satisfies(e -> assertThat(e.getTypeSpecialist()).as("check typeSpecialist").isEqualTo(actual.getTypeSpecialist()));
    }
}
