package co.edu.poli.salud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicationRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationRequestAllPropertiesEquals(MedicationRequest expected, MedicationRequest actual) {
        assertMedicationRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicationRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationRequestAllUpdatablePropertiesEquals(MedicationRequest expected, MedicationRequest actual) {
        assertMedicationRequestUpdatableFieldsEquals(expected, actual);
        assertMedicationRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationRequestAutoGeneratedPropertiesEquals(MedicationRequest expected, MedicationRequest actual) {
        assertThat(expected)
            .as("Verify MedicationRequest auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationRequestUpdatableFieldsEquals(MedicationRequest expected, MedicationRequest actual) {
        assertThat(expected)
            .as("Verify MedicationRequest relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getMilligrams()).as("check milligrams").isEqualTo(actual.getMilligrams()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicationRequestUpdatableRelationshipsEquals(MedicationRequest expected, MedicationRequest actual) {
        assertThat(expected)
            .as("Verify MedicationRequest relationships")
            .satisfies(
                e -> assertThat(e.getMedicalAuthorization()).as("check medicalAuthorization").isEqualTo(actual.getMedicalAuthorization())
            );
    }
}
