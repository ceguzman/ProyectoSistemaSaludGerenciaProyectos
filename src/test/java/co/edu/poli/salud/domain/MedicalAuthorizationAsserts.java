package co.edu.poli.salud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicalAuthorizationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalAuthorizationAllPropertiesEquals(MedicalAuthorization expected, MedicalAuthorization actual) {
        assertMedicalAuthorizationAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicalAuthorizationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalAuthorizationAllUpdatablePropertiesEquals(MedicalAuthorization expected, MedicalAuthorization actual) {
        assertMedicalAuthorizationUpdatableFieldsEquals(expected, actual);
        assertMedicalAuthorizationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalAuthorizationAutoGeneratedPropertiesEquals(MedicalAuthorization expected, MedicalAuthorization actual) {
        assertThat(expected)
            .as("Verify MedicalAuthorization auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalAuthorizationUpdatableFieldsEquals(MedicalAuthorization expected, MedicalAuthorization actual) {
        assertThat(expected)
            .as("Verify MedicalAuthorization relevant properties")
            .satisfies(
                e -> assertThat(e.getDetailAuthorization()).as("check detailAuthorization").isEqualTo(actual.getDetailAuthorization())
            )
            .satisfies(e -> assertThat(e.getStateAuthorization()).as("check stateAuthorization").isEqualTo(actual.getStateAuthorization()))
            .satisfies(e -> assertThat(e.getDateAuthorization()).as("check dateAuthorization").isEqualTo(actual.getDateAuthorization()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalAuthorizationUpdatableRelationshipsEquals(MedicalAuthorization expected, MedicalAuthorization actual) {
        assertThat(expected)
            .as("Verify MedicalAuthorization relationships")
            .satisfies(e -> assertThat(e.getClinicHistory()).as("check clinicHistory").isEqualTo(actual.getClinicHistory()));
    }
}
